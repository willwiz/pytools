__all__ = ["LOG_LEVEL", "LogLevel", "BLogger", "NullLogger", "ILogger"]
import abc
import enum
from typing import Any, Literal

LOG_LEVEL = Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]

class LogLevel(enum.IntEnum):
    NULL = 0
    FATAL = 1
    ERROR = 2
    WARN = 3
    BRIEF = 4
    INFO = 5
    DEBUG = 6

class ILogger(abc.ABC):
    @property
    @abc.abstractmethod
    def mode(self) -> LogLevel: ...
    @abc.abstractmethod
    def disp(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def flush(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def debug(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def info(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def brief(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def warn(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def error(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def fatal(self, *msg: Any) -> None: ...
    @abc.abstractmethod
    def exception(self, e: Exception) -> Exception: ...

class BLogger(ILogger):
    def __init__(
        self,
        level: (
            LogLevel
            | Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]
        ),
    ) -> None: ...
    @property
    def mode(self) -> LogLevel: ...
    def disp(self, *msg: Any) -> None: ...
    def flush(self, *msg: Any) -> None: ...
    def debug(self, *msg: Any) -> None: ...
    def info(self, *msg: Any) -> None: ...
    def brief(self, *msg: Any) -> None: ...
    def warn(self, *msg: Any) -> None: ...
    def error(self, *msg: Any) -> None: ...
    def fatal(self, *msg: Any) -> None: ...
    def exception(self, e: Exception) -> Exception: ...

class NullLogger(ILogger):
    def __init__(self) -> None: ...
    @property
    def mode(self) -> LogLevel: ...
    def disp(self, *msg: Any) -> None: ...
    def flush(self, *msg: Any) -> None: ...
    def debug(self, *msg: Any) -> None: ...
    def info(self, *msg: Any) -> None: ...
    def brief(self, *msg: Any) -> None: ...
    def warn(self, *msg: Any) -> None: ...
    def error(self, *msg: Any) -> None: ...
    def fatal(self, *msg: Any) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
