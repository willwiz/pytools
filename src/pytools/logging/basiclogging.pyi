__all__ = [
    "LOG_LEVEL",
    "BLogger",
    "ILogger",
    "LogLevel",
    "NullLogger",
    "XLogger",
]
import abc
import enum
from pathlib import Path
from typing import Literal

import typing_extensions

LOG_LEVEL: typing_extensions.TypeAlias = Literal[
    "NULL",
    "FATAL",
    "ERROR",
    "WARN",
    "BRIEF",
    "INFO",
    "DEBUG",
]

class LogLevel(enum.IntEnum):
    NULL = 0
    FATAL = 1
    ERROR = 2
    WARN = 3
    BRIEF = 4
    INFO = 5
    DEBUG = 6

class ILogger(abc.ABC):
    @property
    @abc.abstractmethod
    def level(self) -> LogLevel: ...
    @abc.abstractmethod
    def flush(self) -> None: ...
    @abc.abstractmethod
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    @abc.abstractmethod
    def disp(self, *msg: object, end: Literal["\n", "\r"] = "\n") -> None: ...
    @abc.abstractmethod
    def debug(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def info(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def brief(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def warn(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def error(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def fatal(self, *msg: object) -> None: ...
    @abc.abstractmethod
    def exception(self, e: Exception) -> Exception: ...

class BLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]),
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r"] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...

class XLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]),
        file: str | Path | None = None,
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r"] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...

class NullLogger(ILogger):
    def __init__(self) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r"] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
