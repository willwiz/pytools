__all__ = [
    "NULL_LOGGER",
    "BColors",
    "BLogger",
    "TLogger",
    "TXLogger",
    "XLogger",
]
import enum
from pathlib import Path
from typing import Literal

from .trait import LOG_LEVEL, ILogger, LogLevel

NULL_LOGGER: ILogger

class BColors(enum.StrEnum):
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARN = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"

class BLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | LOG_LEVEL),
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
    def close(self) -> None: ...

class XLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | LOG_LEVEL),
        file: str | Path | None = None,
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
    def close(self) -> None: ...

class TXLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | LOG_LEVEL),
        file: str | Path | None = None,
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
    def close(self) -> None: ...

class TLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | LOG_LEVEL),
        file: str | Path | None = None,
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
    def close(self) -> None: ...
