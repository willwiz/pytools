__all__ = [
    "LOG_LEVEL",
    "NULL_LOGGER",
    "BLogger",
    "ILogger",
    "LogLevel",
    "XLogger",
]
from pathlib import Path
from typing import Literal

import typing_extensions

from .trait import ILogger, LogLevel

LOG_LEVEL: typing_extensions.TypeAlias = Literal[
    "NULL",
    "FATAL",
    "ERROR",
    "WARN",
    "BRIEF",
    "INFO",
    "DEBUG",
]

NULL_LOGGER: ILogger

class BLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]),
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", "\x1b[1K\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...

class XLogger(ILogger):
    def __init__(
        self,
        level: (LogLevel | Literal["NULL", "FATAL", "ERROR", "WARN", "BRIEF", "INFO", "DEBUG"]),
        file: str | Path | None = None,
    ) -> None: ...
    @property
    def level(self) -> LogLevel: ...
    def flush(self) -> None: ...
    def print(self, *msg: object, level: LogLevel = ...) -> None: ...
    def disp(self, *msg: object, end: Literal["\n", "\r", "\x1b[1K\r", ""] = "\n") -> None: ...
    def debug(self, *msg: object) -> None: ...
    def info(self, *msg: object) -> None: ...
    def brief(self, *msg: object) -> None: ...
    def warn(self, *msg: object) -> None: ...
    def error(self, *msg: object) -> None: ...
    def fatal(self, *msg: object) -> None: ...
    def exception(self, e: Exception) -> Exception: ...
